{"version":3,"file":"static/js/341.13122ba0.chunk.js","mappings":"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","sources":["component/Admin/NewProduct.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useAlert } from \"react-alert\";\r\nimport MetaData from \"../layouts/MataData/MataData\";\r\nimport Loader from \"../layouts/loader/Loader\";\r\nimport Sidebar from \"./Siderbar\";\r\nimport { createProduct, clearErrors } from \"../../actions/productAction\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { NEW_PRODUCT_RESET } from \"../../constants/productsConstatns\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport StorageIcon from \"@material-ui/icons/Storage\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\r\nimport PercentIcon from '@mui/icons-material/Percent';\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CollectionsIcon from \"@mui/icons-material/Collections\";\r\nimport ShoppingCartOutlinedIcon from \"@material-ui/icons/ShoppingCartOutlined\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\n\r\nimport Navbar from \"./Navbar\";\r\n\r\nimport useStyles from \"../User/LoginFromStyle\";\r\nimport {\r\n  Avatar,\r\n  TextField,\r\n  Typography,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Button,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\n\r\nfunction NewProduct() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const alert = useAlert();\r\n\r\n  const { loading, error, success } = useSelector(\r\n    (state) => state.addNewProduct\r\n  );\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [discount, setDiscount] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [Stock, setStock] = useState(0);\r\n  const [info, setInfo] = useState(\"\")\r\n  const [images, setImages] = useState([]);\r\n  const [sizes, setSizes] = useState([])\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [isCategory, setIsCategory] = useState(false);\r\n  const fileInputRef = useRef();\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  // togle handler =>\r\n  const toggleHandler = () => {\r\n    setToggle(!toggle);\r\n  };\r\n\r\n  const handleCategoryChange = (e) => {\r\n    setCategory(e.target.value);\r\n    setIsCategory(true);\r\n  };\r\n\r\n  const handleImageUpload = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const handleSizeChange = (e) => {\r\n    const { value, checked } = e.target;\r\n    if (checked) {\r\n      setSizes((prev) => [...prev, value]);\r\n    } else {\r\n      setSizes((prev) => prev.filter((size) => size !== value));\r\n    }\r\n  };\r\n\r\n  const categories = [\r\n    \"men-suits\",\r\n    \"women-suits\",\r\n    \"blazers\",\r\n    \"t-shirts\",\r\n    \"designer-choice\",\r\n    \"jodhpuri-suits\",\r\n    \"kurta-set\",\r\n    \"shirts-trousers\",\r\n  ];\r\n  const availableSizes = [\r\n    \"S\",\r\n    \"M\",\r\n    \"L\",\r\n    \"XL\",\r\n    \"2XL\",\r\n  ]\r\n  useEffect(() => {\r\n    if (error) {\r\n      alert.error(error);\r\n      dispatch(clearErrors());\r\n    }\r\n\r\n    if (success) {\r\n      alert.success(\"Product Created Successfully\");\r\n      history.push(\"/admin/dashboard\");\r\n      dispatch({ type: NEW_PRODUCT_RESET });\r\n    }\r\n  }, [dispatch, alert, error, history, success]);\r\n\r\n  const createProductSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const myForm = new FormData();\r\n    myForm.set(\"name\", name);\r\n    myForm.set(\"price\", price);\r\n    myForm.set(\"discount\",discount);\r\n    myForm.set(\"description\", description);\r\n    myForm.set(\"category\", category);\r\n    myForm.set(\"Stock\", Stock);\r\n    myForm.set(\"info\", info);\r\n    sizes.forEach((size) => myForm.append(\"sizes\", size));\r\n    images.forEach((currImg) => {\r\n      myForm.append(\"images\", currImg);\r\n    });\r\n\r\n    dispatch(createProduct(myForm));\r\n  };\r\n\r\n  const createProductImagesChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImages([]);\r\n    setImagesPreview([]);\r\n\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((old) => [...old, reader.result]);\r\n          setImages((old) => [...old, reader.result]);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <MetaData title={\"New Product\"} />\r\n          <div className={classes.updateProduct}>\r\n            <div\r\n              className={\r\n                !toggle ? `${classes.firstBox1}` : `${classes.toggleBox1}`\r\n              }\r\n            >\r\n              <Sidebar />\r\n            </div>\r\n\r\n            <div className={classes.secondBox1}>\r\n              <div className={classes.navBar1}>\r\n                <Navbar toggleHandler={toggleHandler} />\r\n              </div>\r\n\r\n              <div\r\n                className={`${classes.formContainer} ${classes.formContainer2}`}\r\n              >\r\n                <form\r\n                  className={`${classes.form} ${classes.form2}`}\r\n                  encType=\"multipart/form-data\"\r\n                  onSubmit={createProductSubmitHandler}\r\n                >\r\n                  <Avatar className={classes.avatar}>\r\n                    <AddCircleOutlineIcon />\r\n                  </Avatar>\r\n                  <Typography\r\n                    variant=\"h5\"\r\n                    component=\"h1\"\r\n                    className={classes.heading}\r\n                  >\r\n                    Create Product\r\n                  </Typography>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={`${classes.nameInput} ${classes.textField}`}\r\n                    label=\"Product Name\"\r\n                    required\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <ShoppingCartOutlinedIcon\r\n                            style={{\r\n                              fontSize: 20,\r\n                              color: \"#414141\",\r\n                            }}\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Original Price\"\r\n                    value={price}\r\n                    required\r\n                    fullWidth\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setPrice(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <AttachMoneyIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Discount\"\r\n                    // value={price}\r\n                    required\r\n                    fullWidth\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setDiscount(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <PercentIcon/>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Stock\"\r\n                    value={Stock}\r\n                    required\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setStock(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <StorageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Product info\"\r\n                    value={info}\r\n                    required\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setInfo(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <InfoIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <div className={classes.selectOption}>\r\n                    <Typography variant=\"body2\" className={classes.labelText1}>\r\n                      Choose Sizes\r\n                    </Typography>\r\n                    {availableSizes.map((size) => (\r\n                      <FormControlLabel\r\n                        key={size}\r\n                        value={size}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={sizes.includes(size)}\r\n                            onChange={handleSizeChange}\r\n                          />\r\n                        }\r\n                        label={size}\r\n                        labelPlacement=\"start\"\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                  <div className={classes.selectOption}>\r\n                    {!isCategory && (\r\n                      <Typography variant=\"body2\" className={classes.labelText}>\r\n                        Choose Category\r\n                      </Typography>\r\n                    )}\r\n                    <FormControl className={classes.formControl}>\r\n                      <Select\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={category}\r\n                        onChange={handleCategoryChange}\r\n                        className={classes.select}\r\n                        inputProps={{\r\n                          name: \"category\",\r\n                          id: \"category-select\",\r\n                        }}\r\n                        MenuProps={{\r\n                          classes: {\r\n                            paper: classes.menu,\r\n                          },\r\n                          anchorOrigin: {\r\n                            vertical: \"bottom\",\r\n                            horizontal: \"left\",\r\n                          },\r\n                          transformOrigin: {\r\n                            vertical: \"top\",\r\n                            horizontal: \"left\",\r\n                          },\r\n                          getContentAnchorEl: null,\r\n                        }}\r\n                      >\r\n                        {!category && (\r\n                          <MenuItem value=\"\">\r\n                            <em>Choose Category</em>\r\n                          </MenuItem>\r\n                        )}\r\n                        {categories.map((cate) => (\r\n                          <MenuItem key={cate} value={cate}>\r\n                            {cate}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </div>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={classes.descriptionInput}\r\n                    label=\"Product Description\"\r\n                    multiline\r\n                    rows={1}\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <DescriptionIcon\r\n                            className={classes.descriptionIcon}\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <div className={classes.root}>\r\n                    <div className={classes.imgIcon}>\r\n                      <CollectionsIcon\r\n                        fontSize=\"large\"\r\n                        style={{ fontSize: 40 }}\r\n                      />\r\n                    </div>\r\n\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"avatar\"\r\n                      className={classes.input}\r\n                      accept=\"image/*\"\r\n                      onChange={createProductImagesChange}\r\n                      multiple\r\n                      style={{ display: \"none\" }}\r\n                      ref={fileInputRef}\r\n                    />\r\n                    <label htmlFor=\"avatar-input\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        className={classes.uploadAvatarButton}\r\n                        startIcon={\r\n                          <CloudUploadIcon\r\n                            style={{\r\n                              color: \"#FFFFFF\",\r\n                            }}\r\n                          />\r\n                        }\r\n                        onClick={handleImageUpload}\r\n                      >\r\n                        <p className={classes.uploadAvatarText}>\r\n                          Upload Images\r\n                        </p>\r\n                      </Button>\r\n                    </label>\r\n                  </div>\r\n\r\n                  <Box className={classes.imageArea}>\r\n                    {imagesPreview &&\r\n                      imagesPreview.map((image, index) => (\r\n                        <img\r\n                          key={index}\r\n                          src={image}\r\n                          alt=\"Product Preview\"\r\n                          className={classes.image}\r\n                        />\r\n                      ))}\r\n                  </Box>\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className={classes.loginButton}\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={loading ? true : false}\r\n                  >\r\n                    Create\r\n                  </Button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default NewProduct;\r\n"],"names":["dispatch","useDispatch","history","useHistory","alert","useAlert","loading","error","success","useSelector","state","addNewProduct","name","setName","useState","price","setPrice","discount","setDiscount","description","setDescription","category","setCategory","Stock","setStock","info","setInfo","images","setImages","sizes","setSizes","imagesPreview","setImagesPreview","isCategory","setIsCategory","fileInputRef","useRef","toggle","setToggle","classes","useStyles","handleSizeChange","e","value","checked","target","prev","filter","size","useEffect","clearErrors","push","type","NEW_PRODUCT_RESET","_jsx","_Fragment","children","Loader","_jsxs","MetaData","title","className","updateProduct","concat","toggleBox1","firstBox1","Sidebar","secondBox1","navBar1","Navbar","toggleHandler","formContainer","formContainer2","form","form2","encType","onSubmit","preventDefault","myForm","FormData","set","forEach","append","currImg","createProduct","Avatar","avatar","AddCircleOutlineIcon","Typography","variant","component","heading","TextField","fullWidth","nameInput","textField","label","required","onChange","InputProps","endAdornment","InputAdornment","position","ShoppingCartOutlinedIcon","style","fontSize","color","passwordInput","AttachMoneyIcon","PercentIcon","StorageIcon","InfoIcon","selectOption","labelText1","map","FormControlLabel","control","Checkbox","includes","labelPlacement","labelText","FormControl","formControl","Select","select","inputProps","id","MenuProps","paper","menu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","MenuItem","cate","descriptionInput","multiline","rows","DescriptionIcon","descriptionIcon","root","imgIcon","CollectionsIcon","input","accept","files","Array","from","file","reader","FileReader","onload","readyState","old","result","readAsDataURL","multiple","display","ref","htmlFor","Button","uploadAvatarButton","startIcon","CloudUploadIcon","onClick","handleImageUpload","current","click","uploadAvatarText","Box","imageArea","image","index","src","alt","loginButton","disabled"],"sourceRoot":""}