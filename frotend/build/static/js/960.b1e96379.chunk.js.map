{"version":3,"file":"static/js/960.b1e96379.chunk.js","mappings":"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","sources":["component/Admin/UpdateProduct.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useAlert } from \"react-alert\";\r\nimport MetaData from \"../layouts/MataData/MataData\";\r\nimport Loader from \"../layouts/loader/Loader\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport StorageIcon from \"@material-ui/icons/Storage\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n  FormControl,\r\n} from \"@material-ui/core\";\r\nimport Sidebar from \"./Siderbar\";\r\nimport {\r\n  updateProduct,\r\n  clearErrors,\r\n  getProductDetails,\r\n} from \"../../actions/productAction\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { UPDATE_PRODUCT_RESET } from \"../../constants/productsConstatns\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport ShoppingCartOutlinedIcon from \"@material-ui/icons/ShoppingCartOutlined\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\r\nimport PercentIcon from '@mui/icons-material/Percent';\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CollectionsIcon from \"@mui/icons-material/Collections\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Navbar from \"./Navbar\";\r\nimport useStyles from \"../User/LoginFromStyle\";\r\nfunction UpdateProduct() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const alert = useAlert();\r\n\r\n  const classes = useStyles();\r\n  const productId = useRouteMatch().params.id;\r\n  const { error, product } = useSelector((state) => state.productDetails);\r\n\r\n  const { loading, error: updateError, isUpdated } = useSelector(\r\n    (state) => state.deleteUpdateProduct\r\n  );\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [discount, setDiscount] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [isCategory, setIsCategory] = useState(false);\r\n  const [Stock, setStock] = useState(0);\r\n  const [images, setImages] = useState([]);\r\n  const [info, setInfo] = useState('');\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [oldImages, setOldImages] = useState([]);\r\n  const fileInputRef = useRef();\r\n  const [toggle, setToggle] = useState(false);\r\n  const categories = [\r\n    \"men-suits\",\r\n    \"women-suits\",\r\n    \"blazers\",\r\n    \"t-shirts\",\r\n    \"designer-choice\",\r\n    \"jodhpuri-suits\",\r\n    \"kurta-set\",\r\n    \"shirts-trousers\",\r\n  ];\r\n  const handleCategoryChange = (e) => {\r\n    setCategory(e.target.value);\r\n    setIsCategory(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (product && product._id !== productId) {\r\n      dispatch(getProductDetails(productId));\r\n    } else {\r\n      setName(product.name);\r\n      setDescription(product.description);\r\n      setPrice(product.price);\r\n      setDiscount(product.discount);\r\n      setCategory(\"\");\r\n      setInfo(product.info);\r\n      setStock(product.Stock);\r\n      setOldImages(product.images);\r\n    }\r\n\r\n    if (error) {\r\n      alert.error(error);\r\n      dispatch(clearErrors());\r\n    }\r\n\r\n    if (updateError) {\r\n      alert.error(updateError);\r\n      dispatch(clearErrors());\r\n    }\r\n\r\n    if (isUpdated) {\r\n      alert.success(\"Product Updated Successfully\");\r\n      history.push(\"/admin/products\");\r\n      dispatch({ type: UPDATE_PRODUCT_RESET });\r\n    }\r\n  }, [\r\n    dispatch,\r\n    alert,\r\n    error,\r\n    history,\r\n    isUpdated,\r\n    productId,\r\n    product,\r\n    updateError,\r\n  ]);\r\n\r\n  const createProductSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const myForm = new FormData();\r\n    myForm.set(\"name\", name);\r\n    myForm.set(\"price\", price);\r\n    myForm.set(\"discount\", discount);\r\n    myForm.set(\"description\", description);\r\n    myForm.set(\"category\", category);\r\n    myForm.set(\"Stock\", Stock);\r\n    myForm.set(\"info\", info);\r\n    images.forEach((currImg) => {\r\n      myForm.append(\"images\", currImg);\r\n    });\r\n\r\n\r\n    dispatch(updateProduct(productId, myForm));\r\n  };\r\n\r\n\r\n  const handleImageUpload = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const updateProductImagesChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImages([]);\r\n    setImagesPreview([]);\r\n    setOldImages([]);\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((prev) => [...prev, reader.result]);\r\n          setImages((prev) => [...prev, reader.result]);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n  // togle handler =>\r\n  const toggleHandler = () => {\r\n    setToggle(!toggle);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <>\r\n            <MetaData title=\"Create Product\" />\r\n            <div className={classes.updateProduct}>\r\n              <div\r\n                className={\r\n                  !toggle ? `${classes.firstBox1}` : `${classes.toggleBox1}`\r\n                }\r\n              >\r\n                <Sidebar />\r\n              </div>\r\n              <div className={classes.secondBox1}>\r\n                <div className={classes.navBar1}>\r\n                  <Navbar toggleHandler={toggleHandler} />\r\n                </div>\r\n\r\n                <div\r\n                  className={`${classes.formContainer} ${classes.formContainer2}`}\r\n                >\r\n                  <form\r\n                    className={`${classes.form} ${classes.form2}`}\r\n                    encType=\"multipart/form-data\"\r\n                  >\r\n                    <Avatar className={classes.avatar}>\r\n                      <AddCircleOutlineIcon />\r\n                    </Avatar>\r\n                    <Typography\r\n                      variant=\"h5\"\r\n                      component=\"h1\"\r\n                      className={classes.heading}\r\n                    >\r\n                      Create Product\r\n                    </Typography>\r\n                    {/* SpellcheckIcon */}\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      className={`${classes.nameInput} ${classes.textField}`}\r\n                      label=\"Product Name\"\r\n                      required\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <ShoppingCartOutlinedIcon\r\n                              style={{\r\n                                fontSize: 20,\r\n                                color: \"#414141\",\r\n                              }}\r\n                            />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Price\"\r\n                      value={price}\r\n                      required\r\n                      fullWidth\r\n                      className={`${classes.passwordInput} ${classes.textField}`}\r\n                      onChange={(e) => setPrice(e.target.value)}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment\r\n                            position=\"end\"\r\n                            style={{\r\n                              fontSize: 20,\r\n                              color: \"#414141\",\r\n                            }}\r\n                          >\r\n                            <AttachMoneyIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Discount\"\r\n                      value={discount}\r\n                      required\r\n                      fullWidth\r\n                      className={`${classes.passwordInput} ${classes.textField}`}\r\n                      onChange={(e) => setDiscount(e.target.value)}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment\r\n                            position=\"end\"\r\n                            style={{\r\n                              fontSize: 20,\r\n                              color: \"#414141\",\r\n                            }}\r\n                          >\r\n                            <PercentIcon/>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Stock\"\r\n                      value={Stock}\r\n                      required\r\n                      className={`${classes.passwordInput} ${classes.textField}`}\r\n                      onChange={(e) => setStock(e.target.value)}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment\r\n                            position=\"end\"\r\n                            style={{\r\n                              fontSize: 20,\r\n                              color: \"#414141\",\r\n                            }}\r\n                          >\r\n                            <StorageIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Prodcut Info\"\r\n                      value={info}\r\n                      required\r\n                      className={`${classes.passwordInput} ${classes.textField}`}\r\n                      onChange={(e) => setInfo(e.target.value)}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment\r\n                            position=\"end\"\r\n                            style={{\r\n                              fontSize: 20,\r\n                              color: \"#414141\",\r\n                            }}\r\n                          >\r\n                            <InfoIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n\r\n                    <div className={classes.selectOption}>\r\n                      {!isCategory && (\r\n                        <Typography\r\n                          variant=\"body2\"\r\n                          className={classes.labelText}\r\n                        >\r\n                          Choose Category\r\n                        </Typography>\r\n                      )}\r\n                      <FormControl className={classes.formControl}>\r\n                        <Select\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          value={category}\r\n                          onChange={handleCategoryChange}\r\n                          className={classes.select}\r\n                          inputProps={{\r\n                            name: \"category\",\r\n                            id: \"category-select\",\r\n                          }}\r\n                          MenuProps={{\r\n                            classes: {\r\n                              paper: classes.menu,\r\n                            },\r\n                            anchorOrigin: {\r\n                              vertical: \"bottom\",\r\n                              horizontal: \"left\",\r\n                            },\r\n                            transformOrigin: {\r\n                              vertical: \"top\",\r\n                              horizontal: \"left\",\r\n                            },\r\n                            getContentAnchorEl: null,\r\n                          }}\r\n                        >\r\n                          {!category && (\r\n                            <MenuItem value=\"\">\r\n                              <em>Choose Category</em>\r\n                            </MenuItem>\r\n                          )}\r\n                          {categories.map((cate) => (\r\n                            <MenuItem key={cate} value={cate}>\r\n                              {cate}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </div>\r\n\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      className={classes.descriptionInput}\r\n                      label=\"Product Description\"\r\n                      multiline\r\n                      rows={1}\r\n                      value={description}\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <DescriptionIcon\r\n                              className={classes.descriptionIcon}\r\n                            />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n\r\n                    <div className={classes.root}>\r\n                      <div className={classes.imgIcon}>\r\n                        <CollectionsIcon\r\n                          fontSize=\"large\"\r\n                          style={{ fontSize: 40 }}\r\n                        />\r\n                      </div>\r\n\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"avatar\"\r\n                        className={classes.input}\r\n                        accept=\"image/*\"\r\n                        onChange={updateProductImagesChange}\r\n                        multiple\r\n                        style={{ display: \"none\" }}\r\n                        ref={fileInputRef}\r\n                      />\r\n                      <label htmlFor=\"avatar-input\">\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          className={classes.uploadAvatarButton}\r\n                          startIcon={\r\n                            <CloudUploadIcon\r\n                              style={{\r\n                                color: \"#FFFFFF\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          onClick={handleImageUpload}\r\n                        >\r\n                          <p className={classes.uploadAvatarText}>\r\n                            Upload Images\r\n                          </p>\r\n                        </Button>\r\n                      </label>\r\n                    </div>\r\n\r\n                    {imagesPreview.length > 0 ? (\r\n                      <Box className={classes.imageArea}>\r\n                        {imagesPreview &&\r\n                          imagesPreview.map((image, index) => (\r\n                            <img\r\n                              key={index}\r\n                              src={image}\r\n                              alt=\"Product Preview\"\r\n                              className={classes.image}\r\n                            />\r\n                          ))}\r\n                      </Box>\r\n                    ) : (\r\n                      <Box className={classes.imageArea}>\r\n                        {oldImages &&\r\n                          oldImages.map((image, index) => (\r\n                            <img\r\n                              key={index}\r\n                              src={image.url}\r\n                              alt=\"Old Product Preview\"\r\n                              className={classes.image}\r\n                            />\r\n                          ))}\r\n                      </Box>\r\n                    )}\r\n\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      className={classes.loginButton}\r\n                      fullWidth\r\n                      onClick={createProductSubmitHandler}\r\n                      disabled={loading ? true : false}\r\n                    >\r\n                      Create\r\n                    </Button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default UpdateProduct;\r\n"],"names":["dispatch","useDispatch","history","useHistory","alert","useAlert","classes","useStyles","productId","useRouteMatch","params","id","error","product","useSelector","state","productDetails","loading","updateError","isUpdated","deleteUpdateProduct","name","setName","useState","price","setPrice","discount","setDiscount","description","setDescription","category","setCategory","isCategory","setIsCategory","Stock","setStock","images","setImages","info","setInfo","imagesPreview","setImagesPreview","oldImages","setOldImages","fileInputRef","useRef","toggle","setToggle","useEffect","_id","getProductDetails","clearErrors","success","push","type","UPDATE_PRODUCT_RESET","_jsx","_Fragment","children","Loader","_jsxs","MetaData","title","className","updateProduct","concat","toggleBox1","firstBox1","Sidebar","secondBox1","navBar1","Navbar","toggleHandler","formContainer","formContainer2","form","form2","encType","Avatar","avatar","AddCircleOutlineIcon","Typography","variant","component","heading","TextField","fullWidth","nameInput","textField","label","required","value","onChange","e","target","InputProps","endAdornment","InputAdornment","position","ShoppingCartOutlinedIcon","style","fontSize","color","passwordInput","AttachMoneyIcon","PercentIcon","StorageIcon","InfoIcon","selectOption","labelText","FormControl","formControl","Select","select","inputProps","MenuProps","paper","menu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","MenuItem","map","cate","descriptionInput","multiline","rows","DescriptionIcon","descriptionIcon","root","imgIcon","CollectionsIcon","input","accept","files","Array","from","forEach","file","reader","FileReader","onload","readyState","prev","result","readAsDataURL","multiple","display","ref","htmlFor","Button","uploadAvatarButton","startIcon","CloudUploadIcon","onClick","handleImageUpload","current","click","uploadAvatarText","length","Box","imageArea","image","index","src","alt","url","loginButton","preventDefault","myForm","FormData","set","currImg","append","disabled"],"sourceRoot":""}